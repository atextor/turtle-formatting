@prefix : <http://purl.org/atextor/ontology/turtle-formatting#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix ex: <http://example.com/ns#> .

:sparqlPrefixes a owl:Ontology ;
    owl:imports sh: ;
    sh:declare [
        sh:prefix "fmt" ;
        sh:namespace "http://purl.org/atextor/ontology/turtle-formatting#"^^xsd:anyURI ;
    ] ;
    sh:declare [
        sh:prefix "xsd" ;
        sh:namespace "http://www.w3.org/2001/XMLSchema#"^^xsd:anyURI ;
    ]
.

:TurtleFormattingStyleShape a sh:NodeShape ;
    sh:targetClass :TurtleFormattingStyle ;
    sh:property [
        sh:path :knownPrefix ;
        sh:class :KnownPrefix ;
        sh:nodeKind sh:BlankNodeOrIRI ;
    ] ;
    sh:property [
        sh:path :afterClosingParenthesis ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :afterClosingSquareBracket ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :afterComma ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :afterDot ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :afterOpeningParenthesis ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :afterOpeningSquareBracket ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :afterSemicolon ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :alignPrefixes ;
        sh:maxCount 1 ;
        sh:in ( :Left :Off :Right ) ;
    ] ;
    sh:property [
        sh:path :beforeClosingParenthesis ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :beforeClosingSquareBracket ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :beforeComma ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :beforeDot ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :beforeOpeningParenthesis ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :beforeOpeningSquareBracket ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :beforeSemicolon ;
        sh:maxCount 1 ;
        sh:in ( :Newline :Nothing :Space ) ;
    ] ;
    sh:property [
        sh:path :charset ;
        sh:maxCount 1 ;
        sh:in ( :Latin1 :UTF-16-BE :UTF-16-LE :UTF-8 :UTF-8-BOM ) ;
    ] ;
    sh:property [
        sh:path :endOfLine ;
        sh:maxCount 1 ;
        sh:in ( :CR :CRLF :LF ) ;
    ] ;
    sh:property [
        sh:path :indentStyle ;
        sh:maxCount 1 ;
        sh:in ( :Space :Tab ) ;
    ] ;
    sh:property [
        sh:path :wrapListItems ;
        sh:maxCount 1 ;
        sh:in ( :Always :ForLongLines :Never ) ;
    ] ;
    sh:property [
        sh:path :noCommaForPredicate ;
        sh:nodeKind sh:IRI ;
    ] ;
    sh:property [
        sh:path :rdfTypeInNewLine ;
        sh:maxCount 1 ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:property [
        sh:path :useAForRdfType ;
        sh:maxCount 1 ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:property [
        sh:path :useShortLiterals ;
        sh:maxCount 1 ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:property [
        sh:path :alignBaseIRI ;
        sh:maxCount 1 ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:property [
        sh:path :alignObjects ;
        sh:maxCount 1 ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:property [
        sh:path :alignPredicates ;
        sh:maxCount 1 ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:property [
        sh:path :continuationIndentSize ;
        sh:maxCount 1 ;
        sh:datatype xsd:integer ;
    ] ;
    sh:property [
        sh:path :indentPredicates ;
        sh:maxCount 1 ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:property [
        sh:path :insertFinalNewline ;
        sh:maxCount 1 ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:property [
        sh:path :indentSize ;
        sh:maxCount 1 ;
        sh:datatype xsd:integer ;
    ] ;
    sh:property [
        sh:path :maxLineLength ;
        sh:maxCount 1 ;
        sh:datatype xsd:integer ;
    ] ;
    sh:property [
        sh:path :tabWidth ;
        sh:maxCount 1 ;
        sh:datatype xsd:integer ;
    ] ;
    sh:property [
        sh:path :trimTrailingWhitespace ;
        sh:maxCount 1 ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:sparql [
        a sh:SPARQLConstraint ;
        sh:message "If :indentStyle is :Tab, :continuationIndentSize must be set to a multiple of :tabWidth." ;
        sh:prefixes :sparqlPrefixes ;
        sh:select """
           select $this (fmt:continuationIndentSize as ?path) ?value
           where {
             $this fmt:indentStyle fmt:Tab .
             $this fmt:tabWidth ?tabWidth .
             $this fmt:continuationIndentSize ?continuationIndentSize .
             bind(xsd:integer(?tabWidth) as ?tw)
             bind(xsd:integer(?continuationIndentSize) as ?ci)
             filter((?ci - ?tw * (?ci / ?tw)) != 0 || (?ci < ?tw))
             bind(?tw as ?value)
           }
        """ ;
    ] ;
    sh:sparql [
        a sh:SPARQLConstraint ;
        sh:message "If :indentStyle is :Tab, :indentSize must be set to a multiple of :tabWidth." ;
        sh:prefixes :sparqlPrefixes ;
        sh:select """
           select $this (fmt:indentSize as ?path) ?value
           where {
             $this fmt:indentStyle fmt:Tab .
             $this fmt:tabWidth ?tabWidth .
             $this fmt:indentSize ?indentSize .
             bind(xsd:integer(?tabWidth) as ?tw)
             bind(xsd:integer(?indentSize) as ?is)
             filter((?is - ?tw * (?is / ?tw)) != 0 || (?is < ?tw))
             bind(?tw as ?value)
           }
        """ ;
    ]
.
